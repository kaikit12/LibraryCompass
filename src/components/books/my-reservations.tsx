"use client";

import { useState, useEffect, useCallback } from 'react';
import { Reservation } from '@/lib/types';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Bookmark, Loader2, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import { collection, query, where, onSnapshot, doc, updateDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

interface MyReservationsProps {
  userId: string;
}

export function MyReservations({ userId }: MyReservationsProps) {
  const [reservations, setReservations] = useState<Reservation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [cancellingId, setCancellingId] = useState<string | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (!userId) {
      setIsLoading(false);
      return;
    }

    // Use Firestore onSnapshot for real-time updates
    const reservationsQuery = query(
      collection(db, 'reservations'),
      where('userId', '==', userId),
      where('status', 'in', ['active', 'fulfilled'])
    );

    const unsubscribe = onSnapshot(reservationsQuery, (snapshot) => {
      try {
        const reservationsList = snapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            ...data,
            createdAt: data.createdAt?.toDate?.() || new Date(),
            fulfilledAt: data.fulfilledAt?.toDate?.() || null,
          } as Reservation;
        });

        // Sort by createdAt desc (newest first)
        reservationsList.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
        
        setReservations(reservationsList);
        setIsLoading(false);
      } catch (error) {
        console.error('Error processing reservations:', error);
        setReservations([]);
        setIsLoading(false);
      }
    }, (error) => {
      console.error('Error listening to reservations:', error);
      setReservations([]);
      setIsLoading(false);
      toast({
        title: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·∫∑t tr∆∞·ªõc t·ª´ c∆° s·ªü d·ªØ li·ªáu.',
        variant: 'destructive',
      });
    });

    return () => unsubscribe();
  }, [userId, toast]);

  const handleCancelReservation = async (reservationId: string) => {
    setCancellingId(reservationId);
    try {
      const reservationRef = doc(db, 'reservations', reservationId);
      await updateDoc(reservationRef, {
        status: 'cancelled',
      });

      toast({
        title: '‚úÖ ƒê√£ h·ªßy ƒë·∫∑t ch·ªó',
        description: 'ƒê·∫∑t ch·ªó c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng',
      });

    } catch (error: any) {
      console.error('Error cancelling reservation:', error);
      toast({
        variant: 'destructive',
        title: '‚ùå H·ªßy ƒë·∫∑t ch·ªó th·∫•t b·∫°i',
        description: error.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ch·ªó',
      });
    } finally {
      setCancellingId(null);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bookmark className="h-5 w-5" />
            S√°ch ƒë√£ ƒë·∫∑t ch·ªó
          </CardTitle>
          <CardDescription>
            Danh s√°ch c√°c s√°ch b·∫°n ƒëang ch·ªù m∆∞·ª£n
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (reservations.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bookmark className="h-5 w-5" />
            S√°ch ƒë√£ ƒë·∫∑t ch·ªó
          </CardTitle>
          <CardDescription>
            Danh s√°ch c√°c s√°ch b·∫°n ƒëang ch·ªù m∆∞·ª£n
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-muted-foreground">
            <Bookmark className="h-12 w-12 mx-auto mb-3 opacity-50" />
            <p>B·∫°n ch∆∞a ƒë·∫∑t ch·ªó s√°ch n√†o</p>
            <p className="text-sm mt-2">
              Khi s√°ch b·∫°n mu·ªën m∆∞·ª£n h·∫øt, h√£y ƒë·∫∑t ch·ªó ƒë·ªÉ ƒë∆∞·ª£c ∆∞u ti√™n khi c√≥ s√°ch tr·∫£ l·∫°i
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bookmark className="h-5 w-5" />
          S√°ch ƒë√£ ƒë·∫∑t ch·ªó ({reservations.length})
        </CardTitle>
        <CardDescription>
          Danh s√°ch c√°c s√°ch b·∫°n ƒëang ch·ªù m∆∞·ª£n
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {reservations.map((reservation) => (
            <div
              key={reservation.id}
              className="flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors"
            >
              <div className="flex-1">
                <Link href={`/books/${reservation.bookId}`}>
                  <h4 className="font-semibold hover:text-primary transition-colors">
                    {reservation.bookTitle}
                  </h4>
                </Link>
                <div className="flex items-center gap-2 mt-2">
                  {reservation.status === 'fulfilled' ? (
                    <Badge className="bg-green-500 hover:bg-green-600">
                      ‚úÖ S·∫µn s√†ng - C√≥ 48h ƒë·ªÉ m∆∞·ª£n
                    </Badge>
                  ) : (
                    <Badge variant="secondary">
                      V·ªã tr√≠: #{reservation.position}
                    </Badge>
                  )}
                  <span className="text-xs text-muted-foreground">
                    ƒê·∫∑t l√∫c: {new Date(reservation.createdAt).toLocaleDateString('vi-VN')}
                  </span>
                </div>
                {reservation.status === 'fulfilled' && reservation.expiresAt && (
                  <p className="text-sm text-orange-600 mt-1">
                    ‚è∞ H·∫øt h·∫°n: {new Date(reservation.expiresAt).toLocaleString('vi-VN')}
                  </p>
                )}
              </div>
              
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    disabled={cancellingId === reservation.id}
                    className="text-destructive hover:text-destructive hover:bg-destructive/10"
                  >
                    {cancellingId === reservation.id ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <X className="h-4 w-4" />
                    )}
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>H·ªßy ƒë·∫∑t ch·ªó?</AlertDialogTitle>
                    <AlertDialogDescription>
                      B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë·∫∑t ch·ªó cho &quot;{reservation.bookTitle}&quot;?
                      {reservation.status === 'active' && (
                        <span className="block mt-2 text-sm">
                          V·ªã tr√≠ c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c nh∆∞·ªùng cho ng∆∞·ªùi kh√°c trong h√†ng ƒë·ª£i.
                        </span>
                      )}
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel>Kh√¥ng</AlertDialogCancel>
                    <AlertDialogAction
                      onClick={() => handleCancelReservation(reservation.id)}
                      className="bg-destructive hover:bg-destructive/90"
                    >
                      H·ªßy ƒë·∫∑t ch·ªó
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
          ))}
        </div>
        
        {reservations.some(r => r.status === 'active') && (
          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800">
            <p className="text-sm text-blue-800 dark:text-blue-300">
              üí° <strong>L∆∞u √Ω:</strong> Khi s√°ch s·∫µn s√†ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o v√† c√≥ 48 gi·ªù ƒë·ªÉ m∆∞·ª£n s√°ch.
              Sau 48 gi·ªù, s√°ch s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi ti·∫øp theo trong h√†ng ƒë·ª£i.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
