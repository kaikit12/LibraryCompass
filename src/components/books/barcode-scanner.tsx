'use client';

import { useEffect, useRef, useState } from 'react';
import { Html5Qrcode } from 'html5-qrcode';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Camera, CameraOff, Scan, AlertCircle, CheckCircle2 } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';

interface BarcodeScannerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onScanSuccess: (data: string) => void;
  mode?: 'isbn' | 'library-id' | 'both'; // Scan mode
  title?: string;
  description?: string;
}

export function BarcodeScanner({
  open,
  onOpenChange,
  onScanSuccess,
  mode = 'both',
  title = 'Qu√©t m√£ v·∫°ch s√°ch',
  description = 'H∆∞·ªõng camera v√†o m√£ v·∫°ch ISBN ho·∫∑c QR code th∆∞ vi·ªán',
}: BarcodeScannerProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState<string>('');
  const [lastScanned, setLastScanned] = useState<string>('');
  const scannerRef = useRef<Html5Qrcode | null>(null);
  const scannerElementId = 'barcode-scanner-region';

  const startScanner = async () => {
    try {
      setError(''); // Clear previous errors
      
      // Check if element exists
      const element = document.getElementById(scannerElementId);
      if (!element) {
        console.error('Scanner element not found');
        return;
      }

      // Request camera permission first
      try {
        // This will prompt for permission if not granted yet
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        // Stop the test stream immediately
        stream.getTracks().forEach(track => track.stop());
      } catch (permErr: any) {
        throw permErr; // Re-throw to be caught by outer catch
      }
      
      // Initialize scanner
      if (!scannerRef.current) {
        scannerRef.current = new Html5Qrcode(scannerElementId);
      }

      const config = {
        fps: 10,
        qrbox: { width: 300, height: 150 },
        aspectRatio: 16 / 9,
      };

      await scannerRef.current.start(
        { facingMode: 'environment' }, // Use back camera
        config,
        (decodedText) => {
          // Successfully scanned
          let result: string | null = null;

          if (mode === 'isbn') {
            result = extractISBN(decodedText);
            if (!result) {
              setError('M√£ v·∫°ch kh√¥ng ph·∫£i ISBN h·ª£p l·ªá. Vui l√≤ng qu√©t m√£ ISBN 10 ho·∫∑c 13 s·ªë.');
              return;
            }
          } else if (mode === 'library-id') {
            result = decodedText; // QR code contains library ID directly
            if (!result) {
              setError('Kh√¥ng th·ªÉ ƒë·ªçc QR code. Vui l√≤ng th·ª≠ l·∫°i.');
              return;
            }
          } else {
            // mode === 'both': Try ISBN first, then use raw data
            result = extractISBN(decodedText) || decodedText;
          }

          if (result) {
            setLastScanned(result);
            onScanSuccess(result);
            stopScanner();
            onOpenChange(false);
          }
        },
        (errorMessage) => {
          // Scanning in progress (no match yet)
          // This fires continuously, so we don't log it
        }
      );

      setIsScanning(true);
    } catch (err: any) {
      // Don't log to console if it's just a permission error
      if (!err.message?.includes('NotAllowedError') && !err.message?.includes('Permission') && err.name !== 'NotAllowedError') {
        console.error('Scanner error:', err);
      }
      
      const isPermissionError = err.message?.includes('NotAllowedError') || 
                                err.message?.includes('Permission') || 
                                err.name === 'NotAllowedError';
      
      setError(
        isPermissionError
          ? 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera. Vui l√≤ng nh·∫•n "B·∫Øt ƒë·∫ßu qu√©t" l·∫°i v√† ch·ªçn "Cho ph√©p" khi tr√¨nh duy·ªát h·ªèi.'
          : 'Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera. Vui l√≤ng ki·ªÉm tra thi·∫øt b·ªã c·ªßa b·∫°n.'
      );
      setIsScanning(false);
    }
  };

  const stopScanner = async () => {
    try {
      if (scannerRef.current && isScanning) {
        await scannerRef.current.stop();
        setIsScanning(false);
      }
    } catch (err) {
      console.error('Error stopping scanner:', err);
    }
  };

  const extractISBN = (text: string): string | null => {
    // Remove all non-digit characters
    const digits = text.replace(/[^0-9]/g, '');

    // Check for ISBN-13 (13 digits)
    if (digits.length === 13 && (digits.startsWith('978') || digits.startsWith('979'))) {
      return digits;
    }

    // Check for ISBN-10 (10 digits)
    if (digits.length === 10) {
      return digits;
    }

    // Try to find ISBN pattern in text
    const isbn13Match = text.match(/(?:978|979)[0-9]{10}/);
    if (isbn13Match) {
      return isbn13Match[0];
    }

    const isbn10Match = text.match(/\b[0-9]{9}[0-9X]\b/);
    if (isbn10Match) {
      return isbn10Match[0];
    }

    return null;
  };

  useEffect(() => {
    if (open) {
      // Delay to ensure DOM is ready
      const timer = setTimeout(() => {
        startScanner();
      }, 100);
      return () => clearTimeout(timer);
    } else {
      stopScanner();
    }

    // Cleanup on unmount
    return () => {
      stopScanner();
    };
  }, [open]);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Scan className="h-5 w-5 text-blue-600" />
            {title}
          </DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="space-y-2">
                  <p className="font-medium">{error}</p>
                  {error.includes('t·ª´ ch·ªëi') && (
                    <div className="text-sm space-y-1 mt-2 border-t pt-2">
                      <p className="font-medium">üí° L∆∞u √Ω:</p>
                      <ul className="list-disc list-inside space-y-1 ml-2">
                        <li>Nh·∫•n n√∫t &quot;B·∫Øt ƒë·∫ßu qu√©t&quot; b√™n d∆∞·ªõi m·ªôt l·∫ßn n·ªØa</li>
                        <li>Khi tr√¨nh duy·ªát h·ªèi quy·ªÅn camera, ch·ªçn &quot;Cho ph√©p&quot;</li>
                        <li>N·∫øu kh√¥ng th·∫•y popup, c√≥ th·ªÉ b·∫°n ƒë√£ ch·∫∑n vƒ©nh vi·ªÖn</li>
                      </ul>
                      <p className="text-xs mt-2 opacity-80">
                        N·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c, nh·∫•n bi·ªÉu t∆∞·ª£ng üîí tr√™n thanh ƒë·ªãa ch·ªâ ‚Üí Quy·ªÅn ‚Üí Camera ‚Üí Cho ph√©p
                      </p>
                    </div>
                  )}
                </div>
              </AlertDescription>
            </Alert>
          )}

          {lastScanned && !error && (
            <Alert className="bg-green-50 border-green-200">
              <CheckCircle2 className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                ƒê√£ qu√©t th√†nh c√¥ng: <strong>{lastScanned}</strong>
              </AlertDescription>
            </Alert>
          )}

          {/* Scanner Region */}
          <div className="relative">
            <div
              id={scannerElementId}
              className="rounded-lg overflow-hidden border-2 border-dashed border-blue-300 bg-gray-50"
              style={{ minHeight: '300px' }}
            />

            {!isScanning && !error && (
              <div className="absolute inset-0 flex items-center justify-center bg-gray-50 rounded-lg border-2 border-dashed border-blue-300">
                <div className="text-center space-y-3">
                  <Camera className="h-16 w-16 text-muted-foreground mx-auto" />
                  <p className="text-sm text-muted-foreground">
                    Nh·∫•n &quot;B·∫Øt ƒë·∫ßu qu√©t&quot; ƒë·ªÉ k√≠ch ho·∫°t camera
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Instructions */}
          <Alert>
            <AlertDescription>
              <ul className="list-disc list-inside space-y-1 text-sm">
                {mode === 'isbn' ? (
                  <>
                    <li>H∆∞·ªõng camera v√†o m√£ v·∫°ch ISBN (th∆∞·ªùng ·ªü m·∫∑t sau s√°ch)</li>
                    <li>Gi·ªØ camera ·ªïn ƒë·ªãnh v√† ƒë·∫£m b·∫£o ƒë·ªß √°nh s√°ng</li>
                    <li>M√£ v·∫°ch s·∫Ω ƒë∆∞·ª£c qu√©t t·ª± ƒë·ªông khi nh·∫≠n di·ªán</li>
                    <li>H·ªó tr·ª£ c·∫£ ISBN-10 (10 s·ªë) v√† ISBN-13 (13 s·ªë)</li>
                  </>
                ) : mode === 'library-id' ? (
                  <>
                    <li>H∆∞·ªõng camera v√†o QR code tr√™n nh√£n th∆∞ vi·ªán</li>
                    <li>QR code ch·ª©a m√£ ƒë·ªãnh danh duy nh·∫•t c·ªßa s√°ch</li>
                    <li>S·ª≠ d·ª•ng ƒë·ªÉ t√¨m ki·∫øm v√† qu·∫£n l√Ω s√°ch nhanh ch√≥ng</li>
                    <li>ƒê·∫£m b·∫£o QR code kh√¥ng b·ªã nhƒÉn ho·∫∑c h∆∞ h·ªèng</li>
                  </>
                ) : (
                  <>
                    <li>H∆∞·ªõng camera v√†o m√£ v·∫°ch ISBN ho·∫∑c QR code th∆∞ vi·ªán</li>
                    <li>Gi·ªØ camera ·ªïn ƒë·ªãnh v√† ƒë·∫£m b·∫£o ƒë·ªß √°nh s√°ng</li>
                    <li>M√£ s·∫Ω ƒë∆∞·ª£c qu√©t t·ª± ƒë·ªông khi nh·∫≠n di·ªán</li>
                    <li>H·ªó tr·ª£: ISBN-10, ISBN-13, v√† QR code th∆∞ vi·ªán</li>
                  </>
                )}
              </ul>
            </AlertDescription>
          </Alert>

          {/* Controls */}
          <div className="flex gap-2">
            {!isScanning ? (
              <Button onClick={startScanner} className="flex-1">
                <Camera className="h-4 w-4 mr-2" />
                B·∫Øt ƒë·∫ßu qu√©t
              </Button>
            ) : (
              <Button onClick={stopScanner} variant="destructive" className="flex-1">
                <CameraOff className="h-4 w-4 mr-2" />
                D·ª´ng qu√©t
              </Button>
            )}
            <Button onClick={() => onOpenChange(false)} variant="outline">
              ƒê√≥ng
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
